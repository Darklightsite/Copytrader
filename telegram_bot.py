import configparser, json, logging, os
from pathlib import Path
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# --- Konfigur√°ci√≥ ---
SCRIPT_DIR = Path(__file__).resolve().parent
CONFIG_FILE = SCRIPT_DIR / "config.ini"
config = configparser.ConfigParser()
try:
    config.read(CONFIG_FILE, encoding='utf-8')
    TOKEN = config.get("telegram", "bot_token")
    STATUS_FILE = SCRIPT_DIR / config.get("files", "STATUS_FILE")
    # JAV√çTVA: A helyes f√°jln√©v haszn√°lata
    TRANSACTION_HISTORY_FILE = SCRIPT_DIR / config.get("files", "TRANSACTION_HISTORY_FILE")
except Exception as e:
    print(f"Hiba a config.ini beolvas√°sakor: {e}")
    exit()

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# --- PnL Sz√°m√≠t√≥ Logika ---
def calculate_pnl_for_period(days):
    try:
        with open(TRANSACTION_HISTORY_FILE, 'r', encoding='utf-8') as f:
            history = json.load(f)
    except FileNotFoundError:
        return "Hiba: A `transaction_history.json` f√°jl m√©g nem l√©tezik. V√°rj egy ciklust, am√≠g a m√°sol√≥ l√©trehozza."
    except Exception as e:
        return f"Hiba az el≈ëzm√©nyek olvas√°sakor: {e}"

    now = datetime.now()
    if days > 0:
        start_date = now - timedelta(days=days)
    else: # A mai nap (napt√°ri nap)
        start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)

    total_pnl = 0.0
    pnl_types = ["TRADE", "SETTLEMENT", "FUNDING"]

    for trans in history:
        # A V5 Transaction Log a 'transactionTime' mez≈ët haszn√°lja
        trans_time = datetime.fromtimestamp(int(trans.get('transactionTime', 0)) / 1000)
        if trans_time >= start_date and trans.get('type') in pnl_types:
            total_pnl += float(trans.get('change', 0))
            
    return f"${total_pnl:,.2f}"

# --- Parancsok ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üëã Szia! El√©rhet≈ë parancsok:\n\n"
        "`/status` - M≈±k√∂d√©s √©s aktu√°lis √°llapot\n"
        "`/pnl_daily` - Mai realiz√°lt PnL\n"
        "`/pnl_weekly` - Elm√∫lt 7 nap PnL\n"
        "`/pnl_monthly` - Elm√∫lt 30 nap PnL\n"
        "`/pnl_90d` - Elm√∫lt 90 nap PnL"
    )
    await update.message.reply_markdown(help_text)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open(STATUS_FILE, 'r', encoding='utf-8') as f: status = json.load(f)
        reply = (
            f"‚úÖ *A m√°sol√≥ program √°llapota:*\n\n"
            f"Friss√≠tve: `{status.get('timestamp', 'N/A')}`\n"
            f"√âl≈ë egyenleg: *${status.get('live_balance', 0):,.2f}*\n"
            f"Dem√≥ egyenleg: *${status.get('demo_balance', 0):,.2f}*\n\n"
            f"√âl≈ë poz√≠ci√≥k: *{status.get('live_pos_count', 0)} db*\n"
            f"Dem√≥ megb√≠z√°sok (SL): *{status.get('sl_order_count', 0)} db* | Dem√≥ poz√≠ci√≥k: *{status.get('demo_pos_count', 0)} db*\n\n"
            f"üìà √âl≈ë PnL: *${float(status.get('live_pnl', 0)):,.2f}*\n"
            f"üìâ Dem√≥ PnL: *${float(status.get('demo_pnl', 0)):,.2f}*"
        )
        await update.message.reply_markdown(reply)
    except FileNotFoundError:
        await update.message.reply_text("Hiba: A `status.json` f√°jl m√©g nem j√∂tt l√©tre.")
    except Exception as e:
        await update.message.reply_text(f"Hiba az √°llapot beolvas√°sakor: {e}")

async def pnl_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    command = update.message.text.strip()
    reply = "Ismeretlen parancs."
    
    if command == '/pnl_daily':
        pnl = calculate_pnl_for_period(days=0)
        reply = f"üìÖ *Mai realiz√°lt PnL (√âl≈ë):* {pnl}"
    elif command == '/pnl_weekly':
        pnl = calculate_pnl_for_period(days=7)
        reply = f"üóìÔ∏è *Heti realiz√°lt PnL (√âl≈ë):* {pnl}"
    elif command == '/pnl_monthly':
        pnl = calculate_pnl_for_period(days=30)
        reply = f"üà∑Ô∏è *Havi realiz√°lt PnL (√âl≈ë):* {pnl}"
    elif command == '/pnl_90d':
        pnl = calculate_pnl_for_period(days=90)
        reply = f"üìä *90 Napos realiz√°lt PnL (√âl≈ë):* {pnl}"

    await update.message.reply_markdown(reply)

# --- Bot Ind√≠t√°sa ---
def main():
    print("Telegram bot ind√≠t√°sa...")
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler(["start", "help"], start_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("pnl_daily", pnl_command))
    application.add_handler(CommandHandler("pnl_weekly", pnl_command))
    application.add_handler(CommandHandler("pnl_monthly", pnl_command))
    application.add_handler(CommandHandler("pnl_90d", pnl_command))
    print("A bot figyel... (A le√°ll√≠t√°shoz nyomj Ctrl+C-t)")
    application.run_polling()

if __name__ == '__main__':
    main()
